create table "public"."army_entries" (
    "id" bigint generated by default as identity not null,
    "army" bigint not null,
    "unit" bigint not null,
    "tier" bigint not null,
    "upgrade" bigint,
    "enhancement" bigint,
    "updated_at" timestamp with time zone not null default now()
);


alter table "public"."army_entries" enable row level security;

alter table "public"."armies" add column "valid" boolean not null default true;

CREATE UNIQUE INDEX army_entries_pkey ON public.army_entries USING btree (id);

alter table "public"."army_entries" add constraint "army_entries_pkey" PRIMARY KEY using index "army_entries_pkey";

alter table "public"."army_entries" add constraint "army_entries_army_fkey" FOREIGN KEY (army) REFERENCES armies(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."army_entries" validate constraint "army_entries_army_fkey";

alter table "public"."army_entries" add constraint "army_entries_enhancement_fkey" FOREIGN KEY (enhancement) REFERENCES detachment_enhancements(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."army_entries" validate constraint "army_entries_enhancement_fkey";

alter table "public"."army_entries" add constraint "army_entries_tier_fkey" FOREIGN KEY (tier) REFERENCES unit_tiers(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."army_entries" validate constraint "army_entries_tier_fkey";

alter table "public"."army_entries" add constraint "army_entries_unit_fkey" FOREIGN KEY (unit) REFERENCES units(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."army_entries" validate constraint "army_entries_unit_fkey";

alter table "public"."army_entries" add constraint "army_entries_upgrade_fkey" FOREIGN KEY (upgrade) REFERENCES unit_upgrades(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."army_entries" validate constraint "army_entries_upgrade_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.invalidate_armies()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
    -- Update all armies that contain affected army_entries
    UPDATE armies
    SET valid = FALSE
    WHERE id IN (
        SELECT DISTINCT ae.army
        FROM army_entries ae
        WHERE 
            -- Check if the updated unit affects any army_entry
            (TG_TABLE_NAME = 'units' AND ae.unit = NEW.id) OR
            (TG_TABLE_NAME = 'unit_tiers' AND ae.tier = NEW.id) OR
            (TG_TABLE_NAME = 'unit_upgrades' AND ae.upgrade = NEW.id) OR
            (TG_TABLE_NAME = 'detachment_enhancements' AND ae.enhancement = NEW.id)
    );

    RETURN NEW;
END;
$function$
;

grant delete on table "public"."army_entries" to "anon";

grant insert on table "public"."army_entries" to "anon";

grant references on table "public"."army_entries" to "anon";

grant select on table "public"."army_entries" to "anon";

grant trigger on table "public"."army_entries" to "anon";

grant truncate on table "public"."army_entries" to "anon";

grant update on table "public"."army_entries" to "anon";

grant delete on table "public"."army_entries" to "authenticated";

grant insert on table "public"."army_entries" to "authenticated";

grant references on table "public"."army_entries" to "authenticated";

grant select on table "public"."army_entries" to "authenticated";

grant trigger on table "public"."army_entries" to "authenticated";

grant truncate on table "public"."army_entries" to "authenticated";

grant update on table "public"."army_entries" to "authenticated";

grant delete on table "public"."army_entries" to "service_role";

grant insert on table "public"."army_entries" to "service_role";

grant references on table "public"."army_entries" to "service_role";

grant select on table "public"."army_entries" to "service_role";

grant trigger on table "public"."army_entries" to "service_role";

grant truncate on table "public"."army_entries" to "service_role";

grant update on table "public"."army_entries" to "service_role";

create policy "all"
on "public"."army_entries"
as permissive
for all
to authenticated
using (true)
with check (true);


CREATE TRIGGER invalidate_armies_on_detachment_enhancements AFTER UPDATE ON public.detachment_enhancements FOR EACH ROW EXECUTE FUNCTION invalidate_armies();

CREATE TRIGGER invalidate_armies_on_unit_tiers AFTER UPDATE ON public.unit_tiers FOR EACH ROW EXECUTE FUNCTION invalidate_armies();

CREATE TRIGGER invalidate_armies_on_unit_upgrades AFTER UPDATE ON public.unit_upgrades FOR EACH ROW EXECUTE FUNCTION invalidate_armies();

CREATE TRIGGER invalidate_armies_on_units AFTER UPDATE ON public.units FOR EACH ROW EXECUTE FUNCTION invalidate_armies();


