create type "public"."community_role" as enum ('admin', 'member');

create table "public"."communities" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "secret" boolean not null default false
);


alter table "public"."communities" enable row level security;

create table "public"."communities_requests" (
    "id" bigint generated by default as identity not null,
    "user" uuid not null,
    "community" bigint not null,
    "accepted" boolean,
    "updated_at" timestamp without time zone not null default now()
);


alter table "public"."communities_requests" enable row level security;

create table "public"."communities_users" (
    "id" bigint generated by default as identity not null,
    "community" bigint not null,
    "user" uuid not null,
    "role" community_role not null default 'member'::community_role,
    "wins" integer not null default 0,
    "losses" integer not null default 0,
    "ties" integer not null default 0
);


alter table "public"."communities_users" enable row level security;

create table "public"."users_push_tokens" (
    "id" bigint generated by default as identity not null,
    "user" uuid not null default auth.uid(),
    "push_token" character varying not null
);


alter table "public"."users_push_tokens" enable row level security;

alter table "public"."armies" add column "secret" boolean not null default true;

alter table "public"."games" add column "community" bigint;

CREATE UNIQUE INDEX communities_pkey ON public.communities USING btree (id);

CREATE UNIQUE INDEX communities_users_pkey ON public.communities_users USING btree (id);

CREATE UNIQUE INDEX community_requests_pkey ON public.communities_requests USING btree (id);

CREATE UNIQUE INDEX users_push_tokens_pkey ON public.users_push_tokens USING btree (id);

CREATE UNIQUE INDEX users_push_tokens_push_token_key ON public.users_push_tokens USING btree (push_token);

alter table "public"."communities" add constraint "communities_pkey" PRIMARY KEY using index "communities_pkey";

alter table "public"."communities_requests" add constraint "community_requests_pkey" PRIMARY KEY using index "community_requests_pkey";

alter table "public"."communities_users" add constraint "communities_users_pkey" PRIMARY KEY using index "communities_users_pkey";

alter table "public"."users_push_tokens" add constraint "users_push_tokens_pkey" PRIMARY KEY using index "users_push_tokens_pkey";

alter table "public"."communities_requests" add constraint "community_requests_community_fkey" FOREIGN KEY (community) REFERENCES communities(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."communities_requests" validate constraint "community_requests_community_fkey";

alter table "public"."communities_requests" add constraint "community_requests_user_fkey" FOREIGN KEY ("user") REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."communities_requests" validate constraint "community_requests_user_fkey";

alter table "public"."communities_users" add constraint "communities_users_community_fkey" FOREIGN KEY (community) REFERENCES communities(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."communities_users" validate constraint "communities_users_community_fkey";

alter table "public"."communities_users" add constraint "communities_users_user_fkey" FOREIGN KEY ("user") REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."communities_users" validate constraint "communities_users_user_fkey";

alter table "public"."games" add constraint "games_community_fkey" FOREIGN KEY (community) REFERENCES communities(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."games" validate constraint "games_community_fkey";

alter table "public"."users_push_tokens" add constraint "users_push_tokens_push_token_key" UNIQUE using index "users_push_tokens_push_token_key";

alter table "public"."users_push_tokens" add constraint "users_push_tokens_user_fkey" FOREIGN KEY ("user") REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."users_push_tokens" validate constraint "users_push_tokens_user_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_community()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
  INSERT INTO communities_users (community, "user", role)
  VALUES (NEW.id, auth.uid(), 'admin');
  RETURN NEW;
END;$function$
;

CREATE OR REPLACE FUNCTION public.update_community_stats()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$DECLARE
  winner_id UUID;
  loser_id UUID;
  tie BOOLEAN;
BEGIN
  IF NEW.status = 'ended' AND NEW.community IS NOT NULL THEN
    IF NEW.score_one > NEW.score_two THEN
      winner_id := NEW.player_one;
      loser_id := NEW.player_two;
      tie := FALSE;
    ELSIF NEW.score_two > NEW.score_one THEN
      winner_id := NEW.player_two;
      loser_id := NEW.player_one;
      tie := FALSE;
    ELSE
      tie := TRUE;
    END IF;

    IF tie THEN
      -- Tie case
      UPDATE communities_users
      SET ties = ties + 1
      WHERE community = NEW.community AND "user" IN (NEW.player_one, NEW.player_two);
    ELSE
      -- Win/loss case
      UPDATE communities_users
      SET wins = wins + 1
      WHERE community = NEW.community AND "user" = winner_id;

      UPDATE communities_users
      SET losses = losses + 1
      WHERE community = NEW.community AND "user" = loser_id;
    END IF;
  END IF;
  RETURN NEW;
END;$function$
;

grant delete on table "public"."communities" to "anon";

grant insert on table "public"."communities" to "anon";

grant references on table "public"."communities" to "anon";

grant select on table "public"."communities" to "anon";

grant trigger on table "public"."communities" to "anon";

grant truncate on table "public"."communities" to "anon";

grant update on table "public"."communities" to "anon";

grant delete on table "public"."communities" to "authenticated";

grant insert on table "public"."communities" to "authenticated";

grant references on table "public"."communities" to "authenticated";

grant select on table "public"."communities" to "authenticated";

grant trigger on table "public"."communities" to "authenticated";

grant truncate on table "public"."communities" to "authenticated";

grant update on table "public"."communities" to "authenticated";

grant delete on table "public"."communities" to "service_role";

grant insert on table "public"."communities" to "service_role";

grant references on table "public"."communities" to "service_role";

grant select on table "public"."communities" to "service_role";

grant trigger on table "public"."communities" to "service_role";

grant truncate on table "public"."communities" to "service_role";

grant update on table "public"."communities" to "service_role";

grant delete on table "public"."communities_requests" to "anon";

grant insert on table "public"."communities_requests" to "anon";

grant references on table "public"."communities_requests" to "anon";

grant select on table "public"."communities_requests" to "anon";

grant trigger on table "public"."communities_requests" to "anon";

grant truncate on table "public"."communities_requests" to "anon";

grant update on table "public"."communities_requests" to "anon";

grant delete on table "public"."communities_requests" to "authenticated";

grant insert on table "public"."communities_requests" to "authenticated";

grant references on table "public"."communities_requests" to "authenticated";

grant select on table "public"."communities_requests" to "authenticated";

grant trigger on table "public"."communities_requests" to "authenticated";

grant truncate on table "public"."communities_requests" to "authenticated";

grant update on table "public"."communities_requests" to "authenticated";

grant delete on table "public"."communities_requests" to "service_role";

grant insert on table "public"."communities_requests" to "service_role";

grant references on table "public"."communities_requests" to "service_role";

grant select on table "public"."communities_requests" to "service_role";

grant trigger on table "public"."communities_requests" to "service_role";

grant truncate on table "public"."communities_requests" to "service_role";

grant update on table "public"."communities_requests" to "service_role";

grant delete on table "public"."communities_users" to "anon";

grant insert on table "public"."communities_users" to "anon";

grant references on table "public"."communities_users" to "anon";

grant select on table "public"."communities_users" to "anon";

grant trigger on table "public"."communities_users" to "anon";

grant truncate on table "public"."communities_users" to "anon";

grant update on table "public"."communities_users" to "anon";

grant delete on table "public"."communities_users" to "authenticated";

grant insert on table "public"."communities_users" to "authenticated";

grant references on table "public"."communities_users" to "authenticated";

grant select on table "public"."communities_users" to "authenticated";

grant trigger on table "public"."communities_users" to "authenticated";

grant truncate on table "public"."communities_users" to "authenticated";

grant update on table "public"."communities_users" to "authenticated";

grant delete on table "public"."communities_users" to "service_role";

grant insert on table "public"."communities_users" to "service_role";

grant references on table "public"."communities_users" to "service_role";

grant select on table "public"."communities_users" to "service_role";

grant trigger on table "public"."communities_users" to "service_role";

grant truncate on table "public"."communities_users" to "service_role";

grant update on table "public"."communities_users" to "service_role";

grant delete on table "public"."users_push_tokens" to "anon";

grant insert on table "public"."users_push_tokens" to "anon";

grant references on table "public"."users_push_tokens" to "anon";

grant select on table "public"."users_push_tokens" to "anon";

grant trigger on table "public"."users_push_tokens" to "anon";

grant truncate on table "public"."users_push_tokens" to "anon";

grant update on table "public"."users_push_tokens" to "anon";

grant delete on table "public"."users_push_tokens" to "authenticated";

grant insert on table "public"."users_push_tokens" to "authenticated";

grant references on table "public"."users_push_tokens" to "authenticated";

grant select on table "public"."users_push_tokens" to "authenticated";

grant trigger on table "public"."users_push_tokens" to "authenticated";

grant truncate on table "public"."users_push_tokens" to "authenticated";

grant update on table "public"."users_push_tokens" to "authenticated";

grant delete on table "public"."users_push_tokens" to "service_role";

grant insert on table "public"."users_push_tokens" to "service_role";

grant references on table "public"."users_push_tokens" to "service_role";

grant select on table "public"."users_push_tokens" to "service_role";

grant trigger on table "public"."users_push_tokens" to "service_role";

grant truncate on table "public"."users_push_tokens" to "service_role";

grant update on table "public"."users_push_tokens" to "service_role";

create policy "all"
on "public"."communities"
as permissive
for all
to authenticated
using (true)
with check (true);


create policy "all"
on "public"."communities_requests"
as permissive
for all
to authenticated
using (true)
with check (true);


create policy "all"
on "public"."communities_users"
as permissive
for all
to authenticated
using (true)
with check (true);


create policy "all"
on "public"."users_push_tokens"
as permissive
for all
to authenticated
using (true)
with check (true);


create policy "edge_functions"
on "public"."users_push_tokens"
as permissive
for select
to anon
using (true);


CREATE TRIGGER after_community_insert AFTER INSERT ON public.communities FOR EACH ROW EXECUTE FUNCTION handle_new_community();

CREATE TRIGGER send_community_request AFTER INSERT ON public.communities_requests FOR EACH ROW EXECUTE FUNCTION supabase_functions.http_request('http://127.0.0.1:54321/functions/v1/send-push-notifications', 'POST', '{"Content-type":"application/json"}', '{"body":"You have a new community request"}', '1000');

CREATE TRIGGER update_community_stats_trigger AFTER UPDATE OF status ON public.games FOR EACH ROW EXECUTE FUNCTION update_community_stats();


